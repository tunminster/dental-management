# Azure DevOps Pipeline for Dental Management Dashboard
trigger:
- master

variables:
  buildConfiguration: 'Release'
  tag: '$(Build.BuildNumber)'
  imageRepository: 'dental-dashboard-app'

stages:
  - stage: Build
    displayName: 'Build project'
    
    jobs:
      - job: Build
        displayName: 'Build project'

        pool:
          vmImage: ubuntu-latest

        steps:
        - task: NodeTool@0
          inputs:
            versionSource: 'spec'
            versionSpec: '18.x'
            checkLatest: true
          displayName: 'Install Node.js'
        
        - script: |
            npm install
            npm run build
          displayName: 'npm install and build'
          
  - stage: DeployDev
    displayName: 'Deploy dev'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    
    variables:
      - group: bytheapp-demo
      - name: repository-image
        value: 'bytheapp.azurecr.io/dental-dashboard-app:$(Build.BuildNumber)'
      - name: acr-secret-name
        value: 'by-the-app-acr-secret'
      - name: host-url
        value: 'dental-dashboard.bytheapp.com'
      - name: app-domain
        value: 'dental-dashboard.bytheapp.com'
      - name: env-name
        value: 'Production'
      - name: env-namespace
        value: 'dental-dashboard-prod'
      - name: SKIP_PREFLIGHT_CHECK
        value: true
    jobs:
      - job: DeployApp
        displayName: 'Deploy web app'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'containerRegistry'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              buildContext: .
              tags: |
                $(tag)
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: 'k8s-deployment.yaml'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in deploy file'
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)'
              targetFiles: 'k8s-deployment.yaml'
              escapeType: none
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: 'env.template'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - script: |
              cp $(Build.ArtifactStagingDirectory)/env.template $(Build.ArtifactStagingDirectory)/.env
            displayName: 'Copy env template to .env'

          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace tokens in env file'
            inputs:
              rootDirectory: '$(Build.ArtifactStagingDirectory)'
              targetFiles: '.env'
              escapeType: none
              
          - script: 'cat $(Build.ArtifactStagingDirectory)/k8s-deployment.yaml'
            displayName: 'Cat deploy'
          
          - script: 'cat $(Build.ArtifactStagingDirectory)/.env'
            displayName: 'Cat env'
          
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: 'latest'
          
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'by-the-app-cluster'
              namespace: 'by-the-app-prod'
              command: 'apply'
              arguments: '-f $(Build.ArtifactStagingDirectory)/k8s-deployment.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Container Registry'
              dockerRegistryEndpoint: 'containerRegistry'
              secretName: 'by-the-app-acr-secret'
